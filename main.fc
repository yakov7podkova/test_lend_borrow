#include "imports/stdlib.fc";


global slice trusted_addr;  ;; address that we trust to lend to (really stupid solution, but for now it's OK)
global slice owner_addr;
global int my_interest_rate;


int balance() method_id {
    var [balance, _] = get_balance();

    return balance;
}

() save_assets_data(int loan_amount, int lend_APR, int debt_amount, int borrow_APR) impure inline {
    int balance = balance();

    set_data(begin_cell()
    .store_uint(32, balance - debt_amount)
    .store_coins(loan_amount)
    .store_uint(32, lend_APR)
    .store_coins(debt_amount)
    .store_uint(32, borrow_APR)
    .end_cell());
}



(int, int, int, int, int) load_assets_data() method_id {  ;; total assets, total lended, total debt
    slice ds = get_data().begin_parse();

    return (ds~load_uint(32),
            ds~load_coins(),
            ds~load_uint(32),
            ds~load_coins(),
            ds~load_uint(32)
            );   
}


int calc_lend_APR(int till_when, int loan_amount, int interest_rate) inline {
    int period_of_lending = till_when - now();

    return (interest_rate * loan_amount * period_of_lending) * 365 * 100;  ;; there is an logical error in this expression, wrote so it compiles
}

int lend_APR() method_id {
    var (_, _, lend_APR, _, _) = load_assets_data();

    return lend_APR;
}


int borrow_APR() method_id {
    var (_, _, _, _, borrow_APR) = load_assets_data();

    return borrow_APR;
}



() recv_internal(int msg_value, cell in_msg, slice in_msg_body) impure {
    slice cs = in_msg.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_addr = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);  ;; code of operation sent from other conract

    (int assets, int loan_amount, int lend_APR, int debt_amount, int borrow_APR) = load_assets_data(); ;; loading initial assets data
    

    if (op == 1) {  ;; deposit
        return();
    }

    if (op == 2) {  ;; withdrawal
        throw_unless(178, equal_slice_bits(sender_addr, owner_addr));

        int withdraw_amount = in_msg_body~load_coins();
        int balance = balance();

        throw_unless(101, withdraw_amount <= balance);

        int msg_mode = 0 + 1 + 16;

        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender_addr)
            .store_coins(withdraw_amount)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);

        send_raw_message(msg.end_cell(), msg_mode);

        return();
    }

    if (op == 3) {  ;; lending with certain interest 
        throw_unless(177, equal_slice_bits(sender_addr, trusted_addr));

        int till_when = in_msg_body~load_uint(32); ;; UNIX time of the end of lending period
        int loan_amount = in_msg_body~load_coins();

        int balance = balance();
        throw_unless(102, loan_amount <= balance);

        save_assets_data(loan_amount, calc_lend_APR(till_when, loan_amount, my_interest_rate), debt_amount, borrow_APR);

        int msg_mode = 0 + 1 + 16;

        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender_addr)
            .store_coins(loan_amount)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_coins(my_interest_rate * loan_amount)
            .store_uint(32, calc_lend_APR(till_when, loan_amount, my_interest_rate));

        send_raw_message(msg.end_cell(), msg_mode);

        return();
    }

    if (op == 4) {  ;; borrowing with certain interest
        int debt_amount = in_msg_body~load_coins();
        int borrow_APR = in_msg_body~load_uint(32);

        save_assets_data(loan_amount, lend_APR, debt_amount, borrow_APR);

        return();
    }
}





;; ----------------------------------------------
;; op code | description                        |
;; ----------------------------------------------
;; 1       |            sender wants to deposit |
;; 2       |           sender wants to withdraw |
;; 3       |     sender wants to borrow from us |
;; 4       | sender accepted our borrow request |
;; ----------------------------------------------

;; *op == operation 